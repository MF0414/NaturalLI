#!/bin/bash
exec scala -cp qry.jar:test/src/test_client.jar:src/naturalli_client.jar "$0" "$@"
!#
import Qry._

val LOG_DIR = "logs/last_suite/"

using(LOG_DIR)

// A utility for creating a Java instance
def program(c:String):Task = ("java"
  -('cp, cp)
	-"Xmx5G"
	-"Xss32m"
  -"XX:MaxPermSize=256M"
  -"Dwordnet.database.dir=etc/WordNet-3.1/dict"
	-'server
  -'ea
	->c
).toList

// The classifier trainer
def classifier = 
  (program("edu.stanford.nlp.naturalli.entail.ClassifierTrainer")
    -('classifier, "NATURALLI")
    -('naturalli_search, "src/naturalli_search")
    -("train.file", "etc/aristo/turk_90_trainset.tab")
    -("train.cache.do", "false")
    -("test.cache.do", "false")
    -("train.debugdoc", "/dev/null")
    -("train.regularizer", "l2")
    -("log.file", touch("redwood.log"))
   )

// The multiple choice evaluator
def multchoice = 
  (program("edu.stanford.nlp.naturalli.entail.MultipleChoiceSolver")
    -("naturalli.weight", "4.875")
    -("log.file", touch("redwood.log"))
    )


//
// Clear the log directory
// TODO why doesn't this work?
//
//if (new java.io.File(LOG_DIR).exists) {
//  submit("rm" -'r ->LOG_DIR)
//}

//
// Train the classifiers
//
submit(classifier
  -('features, 
      "KEYWORD_OVERLAP LUCENE_SCORE" &
      "KEYWORD_OVERLAP" &
      "LUCENE_SCORE")
  -('model, touch("model.ser.gz"))
)

//
// Run the models (train; all corpora)
//
parallel(3) submit(multchoice
  -("naturalli.incache", "logs/all.cache")
  -("naturalli.outcache", touch("out.cache"))
  -('data, "etc/aristo/eval_monarch_train_allcorpora.tab")
  -('model, 
      (LOG_DIR + "/0/model.ser.gz") &
      (LOG_DIR + "/1/model.ser.gz") &
      (LOG_DIR + "/2/model.ser.gz"))
  -("naturalli.use", "false")
)
parallel(2) submit(multchoice
  -("naturalli.incache", "logs/all.cache")
  -("naturalli.outcache", touch("out.cache"))
  -('data, "etc/aristo/eval_monarch_train_allcorpora.tab")
  -('model, (LOG_DIR + "/2/model.ser.gz"))
  -("naturalli.use", "true")
  -("naturalli.uselucene", "true" & "false")
)

//
////
//// Run the models (train; barrons)
////
//parallel(3) submit(multchoice
//  -("naturalli.incache", "logs/barrons_4.cache")
//  -('data, "etc/aristo/eval_train_barrons.tab")
//  -('model, 
//      (LOG_DIR + "/0/model.ser.gz") &
//      (LOG_DIR + "/1/model.ser.gz") &
//      (LOG_DIR + "/2/model.ser.gz"))
//  -("naturalli.use", "false")
//)
//parallel(2) submit(multchoice
//  -("naturalli.incache", "logs/barrons_4.cache")
//  -('data, "etc/aristo/eval_train_barrons.tab")
//  -('model, (LOG_DIR + "/2/model.ser.gz"))
//  -("naturalli.use", "true")
//  -("naturalli.uselucene", "true" & "false")
//)

//
// Run the models (test; all corpora)
//

//parallel(3) submit(multchoice
//  -("naturalli.incache", "logs/test_all_4.cache")
//  -('data, "etc/aristo/eval_test_allcorpora.tab")
//  -('model, 
//      (LOG_DIR + "/0/model.ser.gz") &
//      (LOG_DIR + "/1/model.ser.gz") &
//      (LOG_DIR + "/2/model.ser.gz"))
//  -("naturalli.use", "false")
//)
//parallel(2) submit(multchoice
//  -("naturalli.incache", "logs/test_all_4.cache")
//  -('data, "etc/aristo/eval_test_allcorpora.tab")
//  -('model, (LOG_DIR + "/2/model.ser.gz"))
//  -("naturalli.use", "true")
//  -("naturalli.uselucene", "true" & "false")
//)

//
// Run the models (test; barrons)
//

//parallel(3) submit(multchoice
//  -("naturalli.incache", "logs/test_barrons_4.cache")
//  -('data, "etc/aristo/eval_test_barrons.tab")
//  -('model, 
//      (LOG_DIR + "/0/model.ser.gz") &
//      (LOG_DIR + "/1/model.ser.gz") &
//      (LOG_DIR + "/2/model.ser.gz"))
//  -("naturalli.use", "false")
//)

//parallel(2) submit(multchoice
//  -("naturalli.incache", "logs/test_barrons_4.cache")
//  -('data, "etc/aristo/eval_test_barrons.tab")
//  -('model, (LOG_DIR + "/2/model.ser.gz"))
//  -("naturalli.use", "true")
//  -("naturalli.uselucene", "true" & "false")
//)

//
// Dump Results
//
submit("logs/print_last_suite.sh")


def cp:String = {
  val JAVANLP = List(
    System.getenv("JAVANLP_HOME") + "/projects/core/classes",
    System.getenv("JAVANLP_HOME") + "/projects/core/lib/joda-time.jar",
    System.getenv("JAVANLP_HOME") + "/projects/core/lib/jollyday-0.4.7.jar",
    System.getenv("JAVANLP_HOME") + "/projects/core/lib/protobuf.jar",
    System.getenv("JAVANLP_HOME") + "/projects/more/classes",
    System.getenv("JAVANLP_HOME") + "/projects/more/lib/BerkeleyParser.jar",
    System.getenv("JAVANLP_HOME") + "/projects/research/classes",
    System.getenv("JAVANLP_HOME") + "/projects/research/lib/reverb.jar",
    System.getenv("JAVANLP_HOME") + "/projects/research/lib/postgresql.jar",
//    "/home/gabor/staging/stanford-corenlp-models-current.jar",
//    "/home/gabor/staging/openie_models.jar"
    "/u/nlp/data/StanfordCoreNLPModels/stanford-corenlp-models-current.jar"
  ).mkString(":")
  val CUSTOM = List(
      "lib/gson-2.3.1.jar",
      "lib/berkeleyaligner.jar",
      "lib/jaws.jar"
    ).mkString(":")
  List("src/naturalli_preprocess.jar", JAVANLP, CUSTOM).mkString(":")
}
